name: Docker Image CI

on:
  pull_request_target:
    branches:
      - master
    types:
      - closed

jobs:
  build:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: master

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew clean build -x test

      - name: Docker build and publish
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
          docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ vars.APP_NAME }} .
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ vars.APP_NAME }}

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: NCP SSH Login and Docker Image pull and run
        uses: appleboy/ssh-action@master
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          NCP_HOST: ${{ secrets.NCP_HOST }}
          NCP_USERNAME: ${{ secrets.NCP_USERNAME }}
          NCP_PASSWORD: ${{ secrets.NCP_PASSWORD }}
          NCP_KEY: ${{ secrets.NCP_KEY }}
          NCP_PORT: ${{ secrets.NCP_PORT }}
          PROD_DB_URL: ${{ secrets.PROD_DB_URL }}
          PROD_DB_USERNAME: ${{ secrets.PROD_DB_USERNAME }}
          PROD_DB_PASSWORD: ${{ secrets.PROD_DB_PASSWORD }}
        with:
          host: ${{ secrets.NCP_HOST }}
          username: ${{ secrets.NCP_USERNAME }}
          password: ${{ secrets.NCP_PASSWORD }}
          key: ${{ secrets.NCP_KEY }}
          port: ${{ secrets.NCP_PORT }}
          script: |
            echo "${{ secrets.DOCKER_PASSWORD }}" | sudo docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
            sudo docker stop $(sudo docker ps -a -q)
            sudo docker rm -f $(sudo docker ps -a -q)
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ vars.APP_NAME }}
            sudo docker run -d -p 8080:8080 \
            -e "SPRING_PROFILES_ACTIVE=prod" \
            -e "PROD_DB_URL=${{ secrets.PROD_DB_URL }}" \
            -e "PROD_DB_USERNAME=${{ secrets.PROD_DB_USERNAME }}" \
            -e "PROD_DB_PASSWORD=${{ secrets.PROD_DB_PASSWORD }}" \
            --name ${{ vars.APP_NAME }} \
            ${{ secrets.DOCKER_USERNAME }}/${{ vars.APP_NAME }}
            sudo docker image prune -f
